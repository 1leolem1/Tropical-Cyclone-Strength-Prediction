import streamlit as st
import pandas as pd
import xgboost as xgb
import folium
import joblib
import time
from streamlit_folium import folium_static
from io import BytesIO

## Fonctions array 

def load_model():
    MODEL_PATH = "model_xgboost.pkl"  
    model = joblib.load(MODEL_PATH)  
    return model

model = load_model()


def determine_averaging_period(agency):
    mapping = {
        'hurdat_atl': '1min',
        'hurdat_epa': '1min',
        'cphc': '1min',
        'tokyo': '10min',
        'newdelhi': '3min',
        'reunion': '10min',
        'bom': '10min',
        'nadi': '10min',
        'wellington': '10min'
    }
    return mapping.get(agency, '10min')  


def apply_wind_conversion(row):
    dist = row['DIST2LAND']
    wind_speed = row['WMO_WIND']
    agency = row['WMO_AGENCY']

    
    avg_period = determine_averaging_period(agency)

    
    if dist > 20:
        exposure_ratios = {'1min': 1, '3min': 1, '10min': 1.05}
    elif dist<= 1:
        exposure_ratios = {'1min': 1, '3min': 1.10, '10min': 1.16}
    else:
        exposure_ratios = {'1min': 1, '3min': 1.05, '10min': 1.11}

    return wind_speed * exposure_ratios[avg_period]


def read_data(data):
    df = pd.read_csv(data)
    col_for_predict = ['SID','USA_SSHS', 'NATURE', 'LON', 'LAT', 'DIST2LAND', 'STORM_SPEED', 'BASIN',
                        'WMO_WIND','WMO_AGENCY','ISO_TIME','IFLAG',"TD9636_WIND"]
    

    df = df[col_for_predict]
    df["ISO_TIME"] = pd.to_datetime(df["ISO_TIME"], errors="coerce")
    df["DIST2LAND"] = pd.to_numeric(df["DIST2LAND"], errors="coerce")
    df["WMO_WIND"] = pd.to_numeric(df["WMO_WIND"], errors="coerce")
    df['NATURE'] = df['NATURE'].astype('category')
    df['BASIN'] = df['BASIN'].astype('category')
    


    df['start_date'] = df.groupby('SID')['ISO_TIME'].transform('min')
    df['start_date'] = pd.to_datetime(df['start_date'])
    df['age_hours'] = (df['ISO_TIME'] - df['start_date']).dt.total_seconds() / 3600
    df['WMO_WIND_ADJUSTED'] = df.apply(apply_wind_conversion, axis=1)
    df['WMO_WIND_ADJUSTED_COMPLETED'] = df['WMO_WIND_ADJUSTED'].fillna(df['TD9636_WIND'])
    return df

# Streamlit Interface 
st.set_page_config(page_title="Tropical Cyclone Prediction", layout="wide",page_icon='üå™Ô∏è')
st.title("üå™Ô∏è Tropical Cyclone Strength Prediction")
tabs = st.tabs(["Introduction", "Prediction", "Map"])
# Main title (always visible)  

# Onglet Introduction
with tabs[0]:
    
      

    # Welcome Section  
    st.subheader("üöÄ Welcome to our Streamlit app!")  
    st.write("""  
    Ever wondered how powerful a tropical cyclone could get? This app helps predict its severity using advanced machine learning!  
    """)  

    # About the Model  
    st.header("üî¨ How does it work?")  
    st.write("""  
    We use **XGBoost**, a cutting-edge machine learning model trained on the **IBTrACS dataset**, a global collection of tropical cyclone data.  
    By analyzing key features like **wind speed, age, basin, and other environmental conditions**, the model estimates a cyclone‚Äôs intensity‚Äîfrom a mild **Tropical Depression** to a devastating **Category 5** storm. üåäüå™Ô∏è  
    """)  

    # How to Use  
    st.header("üõ†Ô∏è How to use this app?")  
    st.write("""  
    1Ô∏è‚É£ Enter the cyclone‚Äôs meteorological data in the input fields.  
    2Ô∏è‚É£ Click the **Predict** button.  
    3Ô∏è‚É£ Instantly get a severity prediction along with key insights.  

    This can help **meteorologists, researchers, and disaster response teams** improve early warnings and better understand cyclone risks. üèùÔ∏è‚ö†Ô∏è  
    """)  

    # Why Use This App?  
    st.header("üåç Why use this app?")  
    st.write("""  
    ‚úÖ **Easy to use** ‚Äì Just enter the data, and get predictions in seconds!  
    ‚úÖ **Powered by AI** ‚Äì Trained on real-world cyclone data for **reliable results**.  
    ‚úÖ **For everyone** ‚Äì Whether you're a scientist or just curious, this app makes cyclone predictions accessible to all!  
    """)  

    # Call to Action  
    st.subheader("‚ö° Ready to predict cyclone strength? Enter your data and get started!") 
# Onglet Pr√©diction
with tabs[1]:
    st.subheader("üìÇ Upload your dataset")  
    st.write("""  
    To predict the severity of tropical cyclones, please upload a CSV file containing meteorological data.  
    The model will analyze key features and estimate the cyclone‚Äôs intensity. üöÄ  
    """)
    
    file = st.file_uploader("üì• Drag and drop your CSV file below", type=["csv"])
    if file:
        data = read_data(file)
        data['Prediction'] = 0
        success_message = st.empty()
        success_message.success("‚úÖ Data successfully loaded!")
        time.sleep(1)
        success_message.empty()
        st.write("""  
            Click the button below to run the model. The system will process the data and return the predicted cyclone severity. üåä  
            """)
        if st.button('‚ö° Run Prediction'):
            
            with st.spinner('üîÑ Calculating prediction... Please wait'):
                time.sleep(3)  # Simuler le d√©lai de pr√©diction (remplace par ton code r√©el de pr√©diction)
                
                
                # V√©rification des features du mod√®le
                required_features = model.get_booster().feature_names
                missing_features = [feature for feature in required_features if feature not in data.columns]
                
                if missing_features:
                    st.error(f"‚ö†Ô∏è The following columns are missing in the dataset: {missing_features}")
                else:
                    # Pr√©diction
                    predictions = model.predict(data[required_features])
                    data["Prediction"] = predictions
                    success_message = st.empty()
                    success_message.success("‚úÖ Prediction complete!")
                    time.sleep(2)
                    success_message.empty()
                    
                    # Affichage des r√©sultats  
                    st.subheader("üìä Prediction Results")  
                    st.write("Here are the predicted cyclone severity levels for your dataset:")
                    st.dataframe(
                        data[['SID','LON','LAT','start_date','age_hours','Prediction']],
                        column_config={
                            "SID": "üå™Ô∏è Storm ID",
                            "LON": 'üìç Longitude',
                            "LAT": 'üìç Latitude',
                            'start_date' : "üìÖ Start Date",
                            'age_hours' : st.column_config.NumberColumn(
                                                                "‚è≥ Age",
                                                                help="The age of the storm",
                                                                step=1,
                                                                format="%d hour(s)",
                                                            ),
                            "Prediction": st.column_config.NumberColumn(
                                                                "üîÆ Prediction",
                                                                help="Predicted cyclone severity (0-7)",
                                                                min_value=0,
                                                                max_value=7,
                                                                step=1,
                                                                format="%d ‚≠ê",
                                                            ),
                        },
                        hide_index=True,
                    )
                    
                    # Export des donn√©es  
                    st.subheader("üì§ Export Results")  
                    st.write("Download the prediction results as a CSV file for further analysis.") 

                    # Export
                    buffer = BytesIO()
                    data.to_csv(buffer, index=False)
                    st.download_button("üì• Download CSV", buffer.getvalue(), file_name="predictions.csv", mime="text/csv")

with tabs[2]:
    # Titre principal avec ic√¥ne
    st.markdown("<h1 style='text-align: center; color: #FF5733;'>üåç Cyclone Location Map</h1>", unsafe_allow_html=True)

    # V√©rification que le DataFrame est bien charg√©
    if "data" in locals() and not data.empty:
        st.subheader("üìç View the cyclone locations on the map")
        st.write("""
        Here is an interactive map displaying the locations of the tropical cyclones based on the meteorological data you provided.
        The intensity of the cyclone is reflected in the color and size of each marker.
        """)

        # Cr√©ation de la carte centr√©e sur le premier point
        center_lat, center_lon = data["LAT"].mean(), data["LON"].mean()
        m = folium.Map(location=[center_lat, center_lon], zoom_start=5)

        # Ajout des marqueurs
        for _, row in data.iterrows():
            lat, lon = row["LAT"], row["LON"]
            start_date = row["start_date"]
            age_hours = row["age_hours"]
            intensity = row["Prediction"]

            # Couleur de l'ic√¥ne en fonction de l'intensit√©
            color_intensity = int(255 * (intensity / 7))  # √âchelle de 0 √† 255
            color = f"#{color_intensity:02x}0000"  # Rouge plus fonc√© pour intensit√© √©lev√©e

            # Ajout des cercles repr√©sentant chaque cyclone
            folium.CircleMarker(
                location=[lat, lon],
                radius=5 + (intensity * 0.5),  # Taille l√©g√®rement plus grande si intensit√© √©lev√©e
                color=color,
                fill=True,
                fill_color=color,
                fill_opacity=0.7,
                popup=f"<b>Date:</b> {start_date}<br><b>Age:</b> {age_hours} hours<br><b>Intensity:</b> {intensity}‚≠ê"
            ).add_to(m)

        # Affichage de la carte
        st.write("üåç Here's the map with cyclone locations:")
        folium_static(m)

    else:
        st.warning("‚ö†Ô∏è No data available to display on the map.")
